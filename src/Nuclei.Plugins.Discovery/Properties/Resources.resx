<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Exceptions_Messages_DuplicateContractName" xml:space="preserve">
    <value>The given contract name is already registered.</value>
  </data>
  <data name="Exceptions_Messages_InvalidExportMethod" xml:space="preserve">
    <value>The method marked with the ExportAttribute is not a valid export method.</value>
  </data>
  <data name="Exceptions_Messages_ParameterShouldNotBeAnEmptyString" xml:space="preserve">
    <value>The parameter should not be an empty string.</value>
  </data>
  <data name="Log_Messages_FileSystemListener_CreatedFile_WithFilePath" xml:space="preserve">
    <value>Discovered new rule file at: {0}</value>
  </data>
  <data name="Log_Messages_FileSystemListener_DeletedFile_ScannerFailed_WithScannerTypeAndFilePathsAndError" xml:space="preserve">
    <value>The scanner of type {0} failed to delete the files  [{1}]. The error was {2}.</value>
  </data>
  <data name="Log_Messages_FileSystemListener_DiscoveredFile_ScannerFailed_WithScannerTypeAndFilePathsAndError" xml:space="preserve">
    <value>The scanner of type {0} failed to scan the files  [{1}]. The error was {2}.</value>
  </data>
  <data name="Log_Messages_FileSystemListener_FileDiscovery_Disabled" xml:space="preserve">
    <value>File discovery - Disabled</value>
  </data>
  <data name="Log_Messages_FileSystemListener_FileDiscovery_Enabled" xml:space="preserve">
    <value>File discovery - Enabled</value>
  </data>
  <data name="Log_Messages_FileSystemListener_LocatedFile_WithFilePath" xml:space="preserve">
    <value>Discovered new file at: {0}</value>
  </data>
  <data name="Log_Messages_FileSystemListener_RemovedFile_WithFilePath" xml:space="preserve">
    <value>Discovered removed file at: {0}</value>
  </data>
  <data name="Log_Messages_FileSystemListener_UpdatedFile_WithFilePath" xml:space="preserve">
    <value>Discovered updated file at: {0}</value>
  </data>
  <data name="Plugins_LogMessage_Detector_FileScanCompleted" xml:space="preserve">
    <value>Plugin discovery process completed.</value>
  </data>
  <data name="Plugins_LogMessage_Detector_FileScanFailed_WithDirectoryAndException" xml:space="preserve">
    <value>Discovering all the files in {0} failed due to an exception. Exception information is: {1}</value>
  </data>
  <data name="Plugins_LogMessage_Detector_FileScanStarted_WithDirectory" xml:space="preserve">
    <value>Discovering plugins in {0}.</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_AssemblyLoadFailed_WithNameAndException" xml:space="preserve">
    <value>The loading of the plugin assembly {0} failed. Exception information is: {1}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_DiscoveredExport_WithDefinition" xml:space="preserve">
    <value>Discovered export: {0}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_DiscoveredImport_WithDefinition" xml:space="preserve">
    <value>Discovered import: {0}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_DiscoveredMember_WithDefinition" xml:space="preserve">
    <value>Discovered custom member: {0}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_FailedToLoadCustomMemberTypes_WithAssemblyAndException" xml:space="preserve">
    <value>Failed to load all types from the custom member assembly {0}. Error was: {1}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_InvalidCustomMember_WithMemberNameAndTypeAndException" xml:space="preserve">
    <value>The given discoverable custom member {0} on {1} is not valid. Error was: {2}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_InvalidCustomMember_WithMemberTypeAndException" xml:space="preserve">
    <value>The given discoverable custom type {0} is not valid. Error was: {1}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_InvalidExport_WithContractNameAndTypeAndException" xml:space="preserve">
    <value>The given export with contract name {0} on {1} is not valid. Error was: {2}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_InvalidImport_WithContractNameAndTypeAndException" xml:space="preserve">
    <value>The given import with contract name {0} on {1} is not valid. Error was: {2}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_TypeScanFailed_WithAssemblyAndException" xml:space="preserve">
    <value>Extracting information from Assembly {0} failed. Exception information is: {1}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_UnableToProcessExport_WithContractName" xml:space="preserve">
    <value>Unable to process export: {0}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_UnableToProcessExport_WithContractNameAndType" xml:space="preserve">
    <value>Unable to process export: {0} on a {1}</value>
  </data>
  <data name="Plugins_LogMessage_Scanner_UnableToProcessImport_WithContractName" xml:space="preserve">
    <value>Unable to process import: {0}</value>
  </data>
  <data name="Plugins_PluginScanDomainName" xml:space="preserve">
    <value>Nuclei.Plugins.Discovery: plugin scan AppDomain</value>
  </data>
  <data name="RemoteAssemblyScanner_LogMessage_AddingDiscoverableMemberToRepository_WithMemberInformation" xml:space="preserve">
    <value>Adding new discoverable member [{0}] to the repository.</value>
  </data>
  <data name="RemoteAssemblyScanner_LogMessage_AddingPartToRepository_WithPartInformation" xml:space="preserve">
    <value>Adding new part [{0}] to repository.</value>
  </data>
  <data name="RemoteAssemblyScanner_LogMessage_ScanningAssembly_WithName" xml:space="preserve">
    <value>Scanning assembly [{0}] for plugins.</value>
  </data>
</root>